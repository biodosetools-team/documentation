[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"Biodose Tools open source project aims tool perform different tests calculations needed biological dosimetry laboratories. app developed using R (R Core Team 2022) programming language Shiny (Chang et al. 2022) framework offer online, easy--use solution. Although intention provide application website, R routines available R package, can downloaded improvement personal use.also aim clarify explain tests used propose considered appropriate. laboratory routine work choose suitable method, project aims reach consensus help us case mutual assistance intercomparisons.project initially developed RENEB association, contributions always welcome.online version book licensed Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.","code":""},{"path":"preface.html","id":"preface","chapter":"Preface","heading":"Preface","text":"","code":""},{"path":"preface.html","id":"structure-of-the-book","chapter":"Preface","heading":"Structure of the book","text":"Chapter 1 introduces user Biodose Tools use either online locally RStudio. Chapters 2 3 cover series examples illustrate functionality different modules. three chapters sufficient get readers comfortable Biodose Tools (either using {shiny} interface R API).Appendix explains give feedback app. Appendix B provide small guide cite Biodose Tools.","code":""},{"path":"preface.html","id":"about-the-authors","chapter":"Preface","heading":"About the authors","text":"project initially developed RENEB association, collaboration Universitat Autònoma de Barcelona (UAB), Bundesamt für Strahlenschutz (BfS), Durham University (DU), Institut de Radioprotection et de Sûreté Nucléaire (IRSN), Universidad de la Rioja (UdR), UK Health Security Agency (UKHSA).","code":""},{"path":"preface.html","id":"principal-contributors","chapter":"Preface","heading":"Principal contributors","text":"","code":""},{"path":"preface.html","id":"contributors","chapter":"Preface","heading":"Contributors","text":"","code":""},{"path":"preface.html","id":"acknowledgments","chapter":"Preface","heading":"Acknowledgments","text":"like thank members RENEB association helped design testing package Shiny app. research done support grant Spanish government (ref. PCIN-2017-077) grant Consejo de Seguridad Nuclear Español (BOE--2019-311).also like thank everyone outside Biodose Tools team helped providing subtitles video tutorials YouTube, particular Tomisato Miura Hirosaki University, helped Japanese subtitles, Tai-Chen, helped Chinese (Simplified) Chinese (Traditional) subtitles.","code":""},{"path":"manual-get.html","id":"manual-get","chapter":"1 Getting Biodose Tools","heading":"1 Getting Biodose Tools","text":"mainly two methods get Biodose Tools:Online web browser. Locally computer using RStudio.chapter go details steps required get Biodose Tools running method.","code":""},{"path":"manual-get.html","id":"manual-get-online","chapter":"1 Getting Biodose Tools","heading":"1.1 Online","text":"Biodose Tools currently hosted Shinyapps.io: https://aldomann.shinyapps.io/biodosetools-v3/.Biodose Tools later hosted one institution’s servers.Biodose Tools througly tested supported following web browsers:Google Chrome.Firefox.Safari.Microsoft Edge.","code":""},{"path":"manual-get.html","id":"manual-get-offline","chapter":"1 Getting Biodose Tools","heading":"1.2 On RStudio","text":"Many laboratories prefer use computers run app instead relying external server, either security reasons better reliability.run Biodose Tools local machine, need install R (R Core Team 2022). Additionally, recommend install RStudio (RStudio Team 2015).series video tutorials prepared aim helping {biodosetools} users installation R, RStudio, package , well usage {shiny} user interface perform dose-effect fitting dose estimation. can found YouTube channel: https://www.youtube.com/@biodosetools.“Installation Guide” tutorial captions available 8 languages. 14th November, 2022 number views three existing tutorials 508.","code":""},{"path":"manual-get.html","id":"installing-r","chapter":"1 Getting Biodose Tools","heading":"1.2.1 Installing R","text":"","code":""},{"path":"manual-get.html","id":"under-windows","chapter":"1 Getting Biodose Tools","heading":"Under Windows","text":"Versions R Windows XP later, including 64-bit versions, available CRAN. distribution includes Rgui.exe, launches self-contained windowing system includes command-line interface, Rterm.exe command-line interface , Rscript.exe batch processing , R.exe, suitable batch command-line use.information Windows-specific issues can found CRAN R Windows FAQ.","code":""},{"path":"manual-get.html","id":"under-macos","chapter":"1 Getting Biodose Tools","heading":"Under macOS","text":"version R macOS 10.6 higher available CRAN. distributed disk image containing installer. addition graphical interface version, command line version (particularly useful batch operations) can run command R.information Macintosh-specific issues can found CRAN R macOS FAQ.","code":""},{"path":"manual-get.html","id":"under-gnulinux","chapter":"1 Getting Biodose Tools","heading":"Under GNU/Linux","text":"R available Linux distributions distribution’s repositories. example, R provided Debian-based distributions like Ubuntu r-base package. Many additional packages, r-cran-rpart, provided maintainer’s discretion.install R Ubuntu, run following commands Terminal:install R Fedora, run following command Terminal:install R Arch Linux, run following command Terminal:","code":"sudo apt-get update\nsudo apt-get install r-base r-base-devdnf --refresh install Rsudo pacman -S r"},{"path":"manual-get.html","id":"installing-rstudio","chapter":"1 Getting Biodose Tools","heading":"1.2.2 Installing RStudio","text":"RStudio Windows, macOS, GNU/Linux can downloaded https://www.rstudio.com/products/rstudio/download/. RStudio requires R installed local machine, make sure install first.installation complete, recommended next step new user start RStudio run sample session.> character command prompt, commands executed user\npresses RETURN ENTER key.","code":""},{"path":"manual-get.html","id":"installing-biodose-tools","chapter":"1 Getting Biodose Tools","heading":"1.2.3 Installing Biodose Tools","text":"can install stable version {biodosetools} CRAN :install development version GitHub :","code":"\ninstall.packages(\"biodosetools\")\ninstall.packages(\"devtools\")\ndevtools::install_github(\"biodosetools-team/biodosetools\")"},{"path":"manual-get.html","id":"running-biodose-tools","chapter":"1 Getting Biodose Tools","heading":"1.2.4 Running Biodose Tools","text":"installed, run Biodose Tools app locally, can run following command R console, invoke {shiny} user interface:","code":"\nlibrary(biodosetools)\nrun_app()"},{"path":"manual-use-shiny.html","id":"manual-use-shiny","chapter":"2 Usage (web UI)","heading":"2 Usage (web UI)","text":"following examples illustrate functionality {biodosetools}’s {shiny} user interface perform dose-effect fitting dose estimation dicentric translocation assays. equivalent examples using R API can found Chapter 3.","code":""},{"path":"manual-use-shiny.html","id":"dicentrics-dose-effect-fitting","chapter":"2 Usage (web UI)","heading":"2.1 Dicentrics dose-effect fitting","text":"","code":""},{"path":"manual-use-shiny.html","id":"input-count-data","chapter":"2 Usage (web UI)","heading":"2.1.1 Input count data","text":"first step input count data. {shiny} app, can select either load count data file (supported formats .csv, .dat, .txt) input data manually (Figure 2.1). table generated filled (Figure 2.2), “Calculate parameters” button calculate total number cells (\\(N\\)), total number aberrations (\\(X\\)), well mean (\\(\\bar{y}\\)), variance (\\(\\sigma^{2}\\)), dispersion index (\\(\\sigma^{2}/\\bar{y}\\)), \\(u\\)-value.\nFigure 2.1: ‘Data input options’ ‘Fitting options’ boxes dose-effect fitting module. dicentrics, ‘Automatic’ fitting model select quasi-Poisson model overdispersion fitting, otherwise select Poisson model assuming equidispersion.\n\nFigure 2.2: `Data input’ box dose-effect fitting module.\n","code":""},{"path":"manual-use-shiny.html","id":"irradiation-conditions","chapter":"2 Usage (web UI)","heading":"2.1.2 Irradiation conditions","text":"irradiation conditions calibration may influence future dose estimates (Trompier et al. 2017), better traceability, user can input conditions samples used construct curve irradiated. option available {shiny} app (Figure 2.3), can saved generated reports.\nFigure 2.3: ‘Irradiation conditions’ box dose-effect fitting module.\n","code":""},{"path":"manual-use-shiny.html","id":"perform-fitting","chapter":"2 Usage (web UI)","heading":"2.1.3 Perform fitting","text":"perform fitting user needs select appropriate fitting options (Figure 2.1), click “Calculate fitting” button “Data input” box (Figure 2.2). fitting results summary statistics shown “Results” tabbed box, dose-effect curve displayed “Curve plot” box (Figure 2.4).\nFigure 2.4: ‘Results’ tabbed box, ‘Curve plot’ ‘Export results’ boxes dose-effect fitting module.\n“Export results” box (Figure 2.4) shows two buttons: () “Save fitting data”, (b) “Download report”. “Save fitting data” generate .rds file contains information count data, irradiation conditions, options selected performing fitting. file can loaded dose estimation module load dose-effect curve coefficients. Similarly, “Download report” generate .pdf .docx report containing inputs fitting results.","code":""},{"path":"manual-use-shiny.html","id":"dicentrics-dose-estimation","chapter":"2 Usage (web UI)","heading":"2.2 Dicentrics dose estimation","text":"","code":""},{"path":"manual-use-shiny.html","id":"load-pre-calculated-curve","chapter":"2 Usage (web UI)","heading":"2.2.1 Load pre-calculated curve","text":"first step either load pre-calculated curve .rds format obtained dose-effect fitting module (Figure 2.5) input curve coefficients manually (Figure 2.6) case user wants use pre-existing curve calculated outside Biodose Tools. Clicking “Preview data” load curve app display “Results” tabbed box.\nFigure 2.5: ‘Curve fitting data options’ box ‘Results’ tabbed box dose estimation module loading curve file.\n\nFigure 2.6: ‘Curve fitting data options’ box ‘Results’ tabbed box dose estimation module inputting curve coefficients manually. Note variance-covariance matrix provided, variances calculated coefficients’ standard errors used (??), (??), (??).\n","code":""},{"path":"manual-use-shiny.html","id":"input-case-data","chapter":"2 Usage (web UI)","heading":"2.2.2 Input case data","text":"Next can choose either load case data file (supported formats .csv, .dat, .txt) input data manually (Figure 2.7). table generated filled, “Calculate parameters” button calculate total number cells (\\(N\\)), total number aberrations (\\(X\\)), well mean (\\(\\bar{y}\\)), standard error (\\(\\sigma\\)), dispersion index (\\(\\sigma^{2}/\\bar{y}\\)), \\(u\\)-value.{shiny} app also includes option include information incident evaluated. information may relevant explain results obtained included generated reports.\nFigure 2.7: ‘Data input options’ ‘Data input’ boxes dose estimation module.\n","code":""},{"path":"manual-use-shiny.html","id":"perform-dose-estimation","chapter":"2 Usage (web UI)","heading":"2.2.3 Perform dose estimation","text":"final step select dose estimation options depending characteristics accident. “Dose estimation options” box (Figure 2.8) can select type exposure (acute, protracted, highly protracted), type assessment (whole-body, partial-body, heterogeneous), error methods type assessment.\nFigure 2.8: ‘Dose estimation options’ box dose estimation module.\ndose estimation results shown Figure 2.9. estimation done app also incorporates possibility describe results obtained “Save results” box. information, calibration curve used, data case, different estimated doses, well description case interpretation results can saved generating .pdf .docx report via “Download report” button.\nFigure 2.9: ‘Results’ tabbed box, ‘Curve plot’ ‘Save results’ boxes dose estimation module.\nimportant note {biodosetools} can used estimate doses, also draft report accident evaluated full traceability. can adapted customised laboratory’s internal needs thanks open-source nature project.","code":""},{"path":"manual-use-shiny.html","id":"translocations-dose-effect-fitting","chapter":"2 Usage (web UI)","heading":"2.3 Translocations dose-effect fitting","text":"","code":""},{"path":"manual-use-shiny.html","id":"calculate-genomic-conversion-factor","chapter":"2 Usage (web UI)","heading":"2.3.1 Calculate genomic conversion factor","text":"able fit equivalent full genome dose-effect curve, need calculate genomic conversion factor., “Stain color options” (Figure 2.10) box select sex individual, list chromosomes stains used translocation assay. Clicking “Generate table” show table “Chromosome data” box select chromosome-stain pairs. Clicking “Calculate fraction” calculate genomic conversion factor.\nFigure 2.10: ‘Stains color options’, ‘Chromosome data’ ‘Genomic conversion factor’ boxes dose-effect fitting module.\n","code":""},{"path":"manual-use-shiny.html","id":"input-count-data-1","chapter":"2 Usage (web UI)","heading":"2.3.2 Input count data","text":"genomic conversion factor calculated, can input count data. {shiny} app, can select either load count data file (supported formats .csv, .dat, .txt) input data manually (Figure 2.11). table generated filled @ref(Figure (fig:sc-trans-fit-03)), “Calculate parameters” button calculate total number cells (\\(N\\)), total number aberrations (\\(X\\)), well mean (\\(\\bar{y}\\)), variance (\\(\\sigma^{2}\\)), dispersion index (\\(\\sigma^{2}/\\bar{y}\\)), \\(u\\)-value.\nFigure 2.11: ‘Data input options’ ‘Fitting options’ boxes dose-effect fitting module.\n\nFigure 2.12: ‘Data input’ box dose-effect fitting module.\n","code":""},{"path":"manual-use-shiny.html","id":"perform-fitting-1","chapter":"2 Usage (web UI)","heading":"2.3.3 Perform fitting","text":"perform fitting user needs select appropriate fitting options (Figure 2.11) click “Calculate fitting” button “Data input” box (Figure 2.12). fit can done either using full genome translocations, measured FISH. impact future dose estimation, results internally use full genome translocations. fitting results summary statistics shown “Results” tabbed box, dose-effect curve displayed “Curve plot” box (Figure 2.13).\nFigure 2.13: ‘Results’ tabbed box, ‘Curve plot’ ‘Export results’ boxes dose-effect fitting module.\n“Export results” box (Figure 2.13) shows two buttons: () “Save fitting data”, (b) “Download report”. “Save fitting data” generate .rds file contains information count data, irradiation conditions, options selected performing fitting. file can loaded dose estimation module load dose-effect curve coefficients. Similarly, “Download report” generate .pdf .docx report containing inputs fitting results.","code":""},{"path":"manual-use-shiny.html","id":"translocations-dose-estimation","chapter":"2 Usage (web UI)","heading":"2.4 Translocations dose estimation","text":"","code":""},{"path":"manual-use-shiny.html","id":"load-pre-calculated-curve-1","chapter":"2 Usage (web UI)","heading":"2.4.1 Load pre-calculated curve","text":"first step either load pre-calculated curve .rds format obtained dose-effect fitting module (Figure 2.14) input curve coefficients manually (Figure 2.15) case user wants use pre-existing curve calculated outside Biodose Tools. Clicking “Preview data” load curve app display “Results” tabbed box.\nFigure 2.14: ‘Curve fitting data options’ box ‘Results’ tabbed box dose estimation module loading curve .rds file.\n\nFigure 2.15: ‘Curve fitting data options’ box ‘Results’ tabbed box dose estimation module inputting curve coefficients manually. Note variance-covariance matrix provided, variances calculated coefficients’ standard errors used (??), (??), (??).\n","code":""},{"path":"manual-use-shiny.html","id":"calculate-genomic-conversion-factor-1","chapter":"2 Usage (web UI)","heading":"2.4.2 Calculate genomic conversion factor","text":"able fit equivalent full genome case data, need calculate genomic conversion factor., “Stain color options” box (Figure 2.16) select sex individual, list chromosomes stains used translocation assay. Clicking “Generate table” show table “Chromosome data” box select chromosome-stain pairs. Clicking “Calculate fraction” calculate genomic conversion factor.\nFigure 2.16: ‘Stains color options’, ‘Chromosome data’ ‘Genomic conversion factor’ boxes dose estimation module.\n","code":""},{"path":"manual-use-shiny.html","id":"input-case-data-1","chapter":"2 Usage (web UI)","heading":"2.4.3 Input case data","text":"Next can choose either load case data file (supported formats .csv, .dat, .txt) input data manually (Figure 2.17). needed, user can select use confounders (either using Sigurdson’s method, inputting translocation frequency per cell). table generated filled, “Calculate parameters” button calculate total number cells (\\(N\\)), total number aberrations (\\(X\\)), well mean (\\(\\bar{F}_{p}\\)), standard error (\\(\\sigma_{p}\\)), dispersion index (\\(\\sigma^{2}/\\bar{y}\\)), \\(u\\)-value, expected translocation rate (\\(X_{c}\\)), full genome mean (\\(\\bar{F}_{g}\\)), full genome error (\\(\\sigma_{g}\\)).{shiny} app also includes option include information incident evaluated. information may relevant explain results obtained included generated reports.\nFigure 2.17: ‘Data input options’ ‘Data input’ boxes dose estimation module.\n","code":""},{"path":"manual-use-shiny.html","id":"perform-dose-estimation-1","chapter":"2 Usage (web UI)","heading":"2.4.4 Perform dose estimation","text":"final step select dose estimation options depending characteristics accident. “Dose estimation options” box (Figure 2.18) can select type exposure (acute protracted), type assessment (whole-body partial-body), error methods type assessment.\nFigure 2.18: ‘Dose estimation options’ box dose estimation module.\ndose estimation results shown Figure 2.19. estimation done app also incorporates possibility describe results obtained “Save results” box. information, calibration curve used, data case, different estimated doses, well description case interpretation results can saved generating .pdf .docx report via “Download report” button.\nFigure 2.19: ‘Results’ tabbed box, ‘Curve plot’ ‘Save results’ boxes dose estimation module.\nimportant note {biodosetools} can used estimate doses, also draft report accident evaluated full traceability. can adapted customised laboratory’s internal needs thanks open-source nature project.","code":""},{"path":"manual-use-r.html","id":"manual-use-r","chapter":"3 Usage (R API)","heading":"3 Usage (R API)","text":"following examples illustrate functionality {biodosetools}’s R API perform dose-effect fitting dose estimation dicentric translocation assays. equivalent examples using {shiny} user interface can found Chapter 2.full {biodosetools} R API reference detailing available functions parameters can found project’s website https://biodosetools-team.github.io/biodosetools/reference/.","code":""},{"path":"manual-use-r.html","id":"dicentrics-dose-effect-fitting-1","chapter":"3 Usage (R API)","heading":"3.1 Dicentrics dose-effect fitting","text":"","code":""},{"path":"manual-use-r.html","id":"input-count-data-2","chapter":"3 Usage (R API)","heading":"3.1.1 Input count data","text":"first step input count data. step accomplished R calling calculate_aberr_table() function. calculate total number cells (\\(N\\)), total number aberrations (\\(X\\)), well mean (\\(\\bar{y}\\)), variance (\\(\\sigma^{2}\\)), dispersion index (\\(\\sigma^{2}/\\bar{y}\\)), \\(u\\)-value.","code":"\ncount_data <- system.file(\"extdata\", \"count-data-barquinero-1995.csv\",\n  package = \"biodosetools\"\n) |>\n  utils::read.csv() |>\n  calculate_aberr_table(type = \"count\")\ncount_data## # A tibble: 11 × 13\n##        D     N     X    C0    C1    C2    C3    C4    C5    mean     var    DI\n##    <dbl> <int> <dbl> <int> <int> <int> <int> <int> <int>   <dbl>   <dbl> <dbl>\n##  1  0     5000     8  4992     8     0     0     0     0 0.0016  0.00160 0.999\n##  2  0.1   5002    14  4988    14     0     0     0     0 0.00280 0.00279 0.997\n##  3  0.25  2008    22  1987    20     1     0     0     0 0.0110  0.0118  1.08 \n##  4  0.5   2002    55  1947    55     0     0     0     0 0.0275  0.0267  0.973\n##  5  0.75  1832   100  1736    92     4     0     0     0 0.0546  0.0560  1.03 \n##  6  1     1168   109  1064    99     5     0     0     0 0.0933  0.0933  0.999\n##  7  1.5    562   100   474    76    12     0     0     0 0.178   0.189   1.06 \n##  8  2      333   103   251    63    17     2     0     0 0.309   0.353   1.14 \n##  9  3      193   108   104    72    15     2     0     0 0.560   0.466   0.834\n## 10  4      103   103    35    41    21     4     2     0 1       0.882   0.882\n## 11  5       59   107    11    19    11     9     6     3 1.81    2.09    1.15 \n## # … with 1 more variable: u <dbl>"},{"path":"manual-use-r.html","id":"perform-fitting-2","chapter":"3 Usage (R API)","heading":"3.1.2 Perform fitting","text":"perform fitting R call fit() function, whilst selecting appropriate aberr_module (\"dicentrics\" example), model_formula (\"lin-quad\" \"lin\" LQ L models, respectively), model_family (\"automatic\", \"poisson\", \"quasipoisson\") parameters:fit_results object list contains necessary information count data well options selected performing fitting. vital step ensure traceability reproducibility. can see elements:particular, can see fit_coeffs matches results obtained UI (Figure 2.4):visualise dose-effect curve, call plot_fit_dose_curve() function:\nFigure 3.1: Plot dose-effect curve generated {biodosetools}. grey shading indicates uncertainties associated calibration curve.\n","code":"\nfit_results <- fit(\n  count_data = count_data,\n  model_formula = \"lin-quad\",\n  model_family = \"automatic\",\n  aberr_module = \"dicentrics\"\n)\nnames(fit_results)##  [1] \"fit_raw_data\"         \"fit_formula_raw\"      \"fit_formula_tex\"     \n##  [4] \"fit_coeffs\"           \"fit_cor_mat\"          \"fit_var_cov_mat\"     \n##  [7] \"fit_dispersion\"       \"fit_model_statistics\" \"fit_algorithm\"       \n## [10] \"fit_model_summary\"\nfit_results$fit_coeffs##                estimate    std.error statistic      p.value\n## coeff_C     0.001280319 0.0004714055  2.715961 6.608367e-03\n## coeff_alpha 0.021038724 0.0051576170  4.079156 4.519949e-05\n## coeff_beta  0.063032534 0.0040073856 15.729091 9.557291e-56\nplot_fit_dose_curve(\n  fit_results,\n  aberr_name = \"Dicentrics\"\n)"},{"path":"manual-use-r.html","id":"dicentrics-dose-estimation-1","chapter":"3 Usage (R API)","heading":"3.2 Dicentrics dose estimation","text":"","code":""},{"path":"manual-use-r.html","id":"input-case-data-2","chapter":"3 Usage (R API)","heading":"3.2.1 Input case data","text":"Next can choose either load case data file input data manually. data parsed R calling calculate_aberr_table() function. calculate total number cells (\\(N\\)), total number aberrations (\\(X\\)), well mean (\\(\\bar{y}\\)), standard error (\\(\\sigma\\)), dispersion index (\\(\\sigma^{2}/\\bar{y}\\)), \\(u\\)-value.","code":"\ncase_data <- system.file(\"extdata\", \"cases-data-partial.csv\",\n  package = \"biodosetools\"\n) |>\n  utils::read.csv(header = TRUE) |>\n  calculate_aberr_table(\n    type = \"case\",\n    assessment_u = 1,\n    aberr_module = \"dicentrics\"\n  )\ncase_data## # A tibble: 1 × 12\n##       N     X    C0    C1    C2    C3    C4    C5     y  y_err    DI     u\n##   <int> <int> <int> <int> <int> <int> <int> <int> <dbl>  <dbl> <dbl> <dbl>\n## 1   361   100   302    28    22     8     1     0 0.277 0.0368  1.77  10.4"},{"path":"manual-use-r.html","id":"perform-dose-estimation-2","chapter":"3 Usage (R API)","heading":"3.2.2 Perform dose estimation","text":"Finally, perform dose estimation R can call adequate estimate_*() functions parameters depending characteristics accident. example, use estimate_whole_body_merkle() estimate_partial_body_dolphin(). First , however, need load fit coefficients variance-covariance matrix previously calculated fit_results:done, can simply call estimate_whole_body_merkle() estimate_partial_body_dolphin():visualise estimated doses, call plot_estimated_dose_curve() function:\nFigure 3.2: Plot estimated doses generated {biodosetools}. grey shading indicates uncertainties associated calibration curve.\n","code":"\nfit_coeffs <- fit_results$fit_coeffs\nfit_var_cov_mat <- fit_results$fit_var_cov_mat\nresults_whole_merkle <- estimate_whole_body_merkle(\n  case_data,\n  fit_coeffs,\n  fit_var_cov_mat,\n  conf_int_yield = 0.83,\n  conf_int_curve = 0.83,\n  protracted_g_value = 1,\n  aberr_module = \"dicentrics\"\n)\nresults_partial <- estimate_partial_body_dolphin(\n  case_data,\n  fit_coeffs,\n  fit_var_cov_mat,\n  conf_int = 0.95,\n  gamma = 1 / 2.7,\n  aberr_module = \"dicentrics\"\n)\nplot_estimated_dose_curve(\n  est_doses = list(\n    whole = results_whole_merkle,\n    partial = results_partial\n  ),\n  fit_coeffs,\n  fit_var_cov_mat,\n  protracted_g_value = 1,\n  conf_int_curve = 0.95,\n  aberr_name = \"Dicentrics\"\n)"},{"path":"manual-use-r.html","id":"translocations-dose-effect-fitting-1","chapter":"3 Usage (R API)","heading":"3.3 Translocations dose-effect fitting","text":"","code":""},{"path":"manual-use-r.html","id":"calculate-genomic-conversion-factor-2","chapter":"3 Usage (R API)","heading":"3.3.1 Calculate genomic conversion factor","text":"able fit equivalent full genome dose-effect curve, need calculate genomic conversion factor. calculate genomic conversion factor R call calculate_genome_factor() function:","code":"\ngenome_factor <- calculate_genome_factor(\n  dna_table = dna_content_fractions_morton,\n  chromosome = c(1, 4, 11),\n  color = rep(\"Red\", 3),\n  sex = \"female\"\n)\ngenome_factor## [1] 0.3147797"},{"path":"manual-use-r.html","id":"input-count-data-3","chapter":"3 Usage (R API)","heading":"3.3.2 Input count data","text":"genomic conversion factor calculated, can input count data. step accomplished R calling calculate_aberr_table() function. calculate total number cells (\\(N\\)), total number aberrations (\\(X\\)), well mean (\\(\\bar{y}\\)), variance (\\(\\sigma^{2}\\)), dispersion index (\\(\\sigma^{2}/\\bar{y}\\)), \\(u\\)-value.","code":"\ncount_data <- system.file(\"extdata\", \"count-data-rodriguez-2004.csv\", package = \"biodosetools\") |>\n  utils::read.csv() |>\n  calculate_aberr_table(type = \"count\") |>\n  dplyr::mutate(N = N * genome_factor)\ncount_data## # A tibble: 11 × 13\n##        D     N     X    C0    C1    C2    C3    C4    C5    mean     var    DI\n##    <dbl> <dbl> <dbl> <int> <int> <int> <int> <int> <int>   <dbl>   <dbl> <dbl>\n##  1  0    1371.     6  4350     6     0     0     0     0 0.00138 0.00138 0.999\n##  2  0.1  1046.    15  3309    15     0     0     0     0 0.00451 0.00449 0.996\n##  3  0.25  966.    18  3051    18     0     0     0     0 0.00587 0.00583 0.994\n##  4  0.5   967.    33  3039    33     0     0     0     0 0.0107  0.0106  0.990\n##  5  0.75  664.    40  2072    38     1     0     0     0 0.0189  0.0195  1.03 \n##  6  1     669.    50  2075    48     1     0     0     0 0.0235  0.0239  1.02 \n##  7  1.5   328.    56   990    50     3     0     0     0 0.0537  0.0566  1.05 \n##  8  2     226.    71   650    65     3     0     0     0 0.0989  0.0976  0.987\n##  9  3     246.   157   649   108    23     1     0     0 0.201   0.227   1.13 \n## 10  4     125.   147   265   117    15     0     0     0 0.370   0.310   0.836\n## 11  5     124.   180   246   122    23     4     0     0 0.456   0.426   0.936\n## # … with 1 more variable: u <dbl>"},{"path":"manual-use-r.html","id":"perform-fitting-3","chapter":"3 Usage (R API)","heading":"3.3.3 Perform fitting","text":"perform fitting R call fit() function, whilst selecting appropriate aberr_module (\"translocations\" example), model_formula (\"lin-quad\" \"lin\" LQ L models, respectively), model_family (\"automatic\", \"poisson\", \"quasipoisson\") parameters:fit_results object list contains necessary information count data well options selected performing fitting. vital step ensure traceability reproducibility. can see elements:particular, can see fit_coeffs matches results obtained UI (Figure 2.13):visualise dose-effect curve, call plot_fit_dose_curve() function:\nFigure 3.3: Plot dose-effect curve generated {biodosetools}. grey shading indicates uncertainties associated calibration curve.\n","code":"\nfit_results <- fit(\n  count_data = count_data,\n  model_formula = \"lin-quad\",\n  model_family = \"automatic\",\n  fit_link = \"identity\",\n  aberr_module = \"translocations\"\n)\nnames(fit_results)##  [1] \"fit_raw_data\"         \"fit_formula_raw\"      \"fit_formula_tex\"     \n##  [4] \"fit_coeffs\"           \"fit_cor_mat\"          \"fit_var_cov_mat\"     \n##  [7] \"fit_dispersion\"       \"fit_model_statistics\" \"fit_algorithm\"       \n## [10] \"fit_model_summary\"\nfit_results$fit_coeffs##                estimate   std.error statistic      p.value\n## coeff_C     0.006560406 0.002052834  3.195780 2.538519e-02\n## coeff_alpha 0.027197296 0.009922177  2.741061 5.081502e-02\n## coeff_beta  0.057982322 0.004630926 12.520675 3.100113e-06\nplot_fit_dose_curve(\n  fit_results,\n  aberr_name = \"Translocations\"\n)"},{"path":"manual-use-r.html","id":"translocations-dose-estimation-1","chapter":"3 Usage (R API)","heading":"3.4 Translocations dose estimation","text":"","code":""},{"path":"manual-use-r.html","id":"calculate-genomic-conversion-factor-3","chapter":"3 Usage (R API)","heading":"3.4.1 Calculate genomic conversion factor","text":"able fit equivalent full genome case data, need calculate genomic conversion factor., “Stain color options” box select sex individual, list chromosomes stains used translocation assay. Clicking “Generate table” show table “Chromosome data” box select chromosome-stain pairs. Clicking “Calculate fraction” calculate genomic conversion factor.calculate genomic conversion factor R call calculate_genome_factor() function:","code":"\ngenome_factor <- calculate_genome_factor(\n  dna_table = dna_content_fractions_morton,\n  chromosome = c(1, 2, 3, 4, 5, 6),\n  color = c(\"Red\", \"Red\", \"Green\", \"Red\", \"Green\", \"Green\"),\n  sex = \"male\"\n)\ngenome_factor## [1] 0.5847343"},{"path":"manual-use-r.html","id":"input-case-data-3","chapter":"3 Usage (R API)","heading":"3.4.2 Input case data","text":"Next can choose either load case data file input data manually. data parsed R calling calculate_aberr_table() function. needed, user can select use confounders (either using Sigurdson’s method, inputting translocation frequency per cell). table generated filled, “Calculate parameters” button calculate total number cells (\\(N\\)), total number aberrations (\\(X\\)), well mean (\\(\\bar{F}_{p}\\)), standard error (\\(\\sigma_{p}\\)), dispersion index (\\(\\sigma^{2}/\\bar{y}\\)), \\(u\\)-value, expected translocation rate (\\(X_{c}\\)), full genome mean (\\(\\bar{F}_{g}\\)), full genome error (\\(\\sigma_{g}\\)).","code":"\ncase_data <- data.frame(\n  C0 = 288, C1 = 52, C2 = 9, C3 = 1\n) |>\n  calculate_aberr_table(\n    type = \"case\",\n    assessment_u = 1,\n    aberr_module = \"translocations\"\n  ) |>\n  dplyr::mutate(\n    Xc = calculate_trans_rate_sigurdson(\n      cells = N,\n      genome_factor = genome_factor,\n      age_value = 30,\n      smoker_bool = TRUE\n    ),\n    Fg = (X - Xc) / (N * genome_factor),\n    Fg_err = Fp_err / sqrt(genome_factor)\n  )\ncase_data## # A tibble: 1 × 13\n##       N     X    C0    C1    C2    C3    Fp Fp_err    DI     u    Xc    Fg\n##   <int> <int> <int> <int> <int> <int> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl>\n## 1   350    73   288    52     9     1 0.209 0.0259  1.12  1.64  1.02 0.352\n## # … with 1 more variable: Fg_err <dbl>"},{"path":"manual-use-r.html","id":"perform-dose-estimation-3","chapter":"3 Usage (R API)","heading":"3.4.3 Perform dose estimation","text":"Finally, perform dose estimation R can call adequate estimate_*() functions parameters depending characteristics accident. example, use estimate_whole_body_delta(). First , however, need load fit coefficients variance-covariance matrix previously calculated fit_results:Since protracted exposure, need calculate value \\(G(x)\\):done, can simply call estimate_whole_body_delta():visualise estimated doses, call plot_estimated_dose_curve() function:\nFigure 3.4: Plot estimated doses generated {biodosetools}. grey shading indicates uncertainties associated calibration curve.\n","code":"\nfit_coeffs <- fit_results$fit_coeffs\nfit_var_cov_mat <- fit_results$fit_var_cov_mat\nprotracted_g_value <- protracted_g_function(\n  time = 0.5,\n  time_0 = 2\n)\nprotracted_g_value## [1] 0.9216251\nresults_whole_delta <- estimate_whole_body_delta(\n  case_data,\n  fit_coeffs,\n  fit_var_cov_mat,\n  conf_int = 0.95,\n  protracted_g_value,\n  aberr_module = \"translocations\"\n)\nplot_estimated_dose_curve(\n  est_doses = list(whole = results_whole_delta),\n  fit_coeffs,\n  fit_var_cov_mat,\n  protracted_g_value,\n  conf_int_curve = 0.95,\n  aberr_name = \"Translocations\"\n)"},{"path":"appendix-feedback.html","id":"appendix-feedback","chapter":"A Feedback and issues","heading":"A Feedback and issues","text":"Please provide suggestions feedback help us improve Biodose Tools. Use following link open new issue project’s issue tracker: https://github.com/biodosetools-team/biodosetools/issues/new. can also use “Report issue” button Biodose Tools home page.provide short template issue tracker, pictured :Please make sure specify version used (located bottom sidebar Biodose Tools), well assessment (dicentrics, translocations, etc.) module (fitting, dose estimation, etc.)descriptive possible case error issue, explain required steps reproduce experienced error. can attach pictures helps illustrate issue.","code":""},{"path":"appendix-cite.html","id":"appendix-cite","chapter":"B How to cite Biodose Tools","heading":"B How to cite Biodose Tools","text":"want cite Biodose Tools, can copy download following BibTeX entry:Alternatively, can use:. Hernández, D. Endesfelder, J. Einbeck, P. Puig, M. . Benadjaoud, M. Higueras, E. Ainsbury, G. Gruel, U. Oestreicher, L. Barrios & J. F. Barquinero (2022). Biodose Tools: R Shiny Application Biological Dosimetry. URL https://biodosetools-team.github.io/biodosetools/","code":"@Unpublished{BiodoseTools2022,\n  note = {Manuscript under construction},\n  author = {Alfredo Hern{'{a}}ndez and David Endesfelder and Jochen Einbeck and Pedro Puig and Mohamed Amine Benadjaoud and Manuel Higueras and Elizabeth Ainsbury and Ga{\"{e}}tan Gruel and Ursula Oestreicher and Leonardo Barrios and Joan Francesc Barquinero},\n  title = {Biodose Tools: An R Shiny Application for Biological Dosimetry},\n  year = {2022},\n  url = {https://biodosetools-team.github.io/biodosetools/},\n}"},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
